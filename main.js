document.addEventListener('DOMContentLoaded', () => {
    // --- THEME SWITCHER LOGIC ---
    const themeToggleButton = document.getElementById('theme-toggle-button');
    const body = document.body;
    const themes = ['dark', 'light', 'ultra-dark'];
    const themeIcons = {
        'light': document.getElementById('theme-icon-light'),
        'dark': document.getElementById('theme-icon-dark'),
        'ultra-dark': document.getElementById('theme-icon-ultra-dark')
    };
    
    let currentThemeIndex = 0;

    function applyTheme(theme) {
        body.dataset.theme = theme;
        currentThemeIndex = themes.indexOf(theme);
        localStorage.setItem('theme', theme);

        // Update icon visibility
        Object.values(themeIcons).forEach(icon => icon.style.display = 'none');
        themeIcons[theme].style.display = 'block';
    }

    // On load, check for saved theme
    const savedTheme = localStorage.getItem('theme') || 'dark';
    applyTheme(savedTheme);

    // Toggle on button click
    themeToggleButton.addEventListener('click', () => {
        currentThemeIndex = (currentThemeIndex + 1) % themes.length;
        const nextTheme = themes[currentThemeIndex];
        applyTheme(nextTheme);
    });

    // --- CONFIGURATOR LOGIC (MOSTLY UNCHANGED) ---
    const elements = {
        tabs: document.querySelectorAll('.tab-button'),
        tabContents: document.querySelectorAll('.tab-content'),
        yamlOutput: document.getElementById('yaml-output'),
        copyButton: document.getElementById('copy-button'),
        downloadButton: document.getElementById('download-button'),
        imageTag: document.getElementById('image-tag'),
        containerName: document.getElementById('container-name'),
        hostPort: document.getElementById('host-port'),
        ollamaUrl: document.getElementById('ollama-url'),
        enableSignup: document.getElementById('enable-signup'),
        requireAuth: document.getElementById('require-auth'),
        defaultModels: document.getElementById('default-models'),
        secretKey: document.getElementById('secret-key'),
        memoryLimit: document.getElementById('memory-limit'),
        memoryValue: document.getElementById('memory-value'),
        restartPolicy: document.getElementById('restart-policy')
    };
    
    const config = {};

    function updateYaml() {
        config.imageTag = elements.imageTag.value;
        config.containerName = elements.containerName.value;
        config.hostPort = elements.hostPort.value;
        config.ollamaUrl = elements.ollamaUrl.value;
        config.enableSignup = elements.enableSignup.checked;
        config.requireAuth = elements.requireAuth.checked;
        config.defaultModels = elements.defaultModels.value;
        config.secretKey = elements.secretKey.value;
        config.memoryLimit = elements.memoryLimit.value;
        config.restartPolicy = elements.restartPolicy.value;

        const envVars = [];
        if (config.ollamaUrl && config.ollamaUrl !== 'http://host.docker.internal:11434') {
            envVars.push(`- OLLAMA_BASE_URL=${config.ollamaUrl}`);
        }
         if (!config.enableSignup) {
            envVars.push(`- WEBUI_ENABLE_SIGNUP=false`);
        }
        if (!config.requireAuth) {
            envVars.push(`- WEBUI_AUTH=false`);
        }
        if (config.defaultModels) {
            envVars.push(`- WEBUI_DEFAULT_MODELS=${config.defaultModels}`);
        }
        if (config.secretKey) {
            envVars.push(`- WEBUI_SECRET_KEY=${config.secretKey}`);
        }

        const environmentSection = envVars.length > 0 ? `
    environment:${envVars.map(v => `\n      ${v}`).join('')}` : '';
        
        const containerNameSection = (config.containerName && config.containerName !== 'open-webui') ? `
    container_name: ${config.containerName}` : '';
        
        const memorySection = config.memoryLimit > 0 ? `
    mem_limit: ${config.memoryLimit}g` : '';

        const restartSection = `
    restart: ${config.restartPolicy}`;

        const yamlString = `# Generated by Internode.Info on ${new Date().toISOString()}

services:
  open-webui:
    image: ghcr.io/open-webui/open-webui:${config.imageTag}${containerNameSection}
    ports:
      - "${config.hostPort}:8080"
    volumes:
      - "open-webui:/app/backend/data"${environmentSection}${memorySection}${restartSection}

volumes:
  open-webui: {}
`;
        elements.yamlOutput.textContent = yamlString.trim();
    }

    // --- Event Listeners ---
    elements.tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            elements.tabs.forEach(t => t.classList.remove('active'));
            elements.tabContents.forEach(c => c.classList.remove('active'));
            
            tab.classList.add('active');
            document.getElementById('tab-' + tab.dataset.tab).classList.add('active');
        });
    });

    const inputs = document.querySelectorAll('.form-input, .form-select, input[type="checkbox"], input[type="range"]');
    inputs.forEach(input => input.addEventListener('input', updateYaml));

    elements.memoryLimit.addEventListener('input', () => {
        const value = elements.memoryLimit.value;
        elements.memoryValue.textContent = value > 0 ? `${value} GB` : 'None';
    });

    elements.copyButton.addEventListener('click', () => {
        navigator.clipboard.writeText(elements.yamlOutput.textContent).then(() => {
            elements.copyButton.classList.add('copied');
            setTimeout(() => {
                elements.copyButton.classList.remove('copied');
            }, 2000);
        });
    });

    elements.downloadButton.addEventListener('click', () => {
        const blob = new Blob([elements.yamlOutput.textContent], { type: 'application/x-yaml' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'compose.yml';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    });

    // --- Initial Call ---
    updateYaml();

});